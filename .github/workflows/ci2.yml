name: CI2

on: [ push , pull_request ]

# We set the supported coq-version from here. In order to use this environment variable correctly, look at how they are used in the following jobs.
env:
  coq-version-supported: '8.13'

# Our jobs come in 3 stages, the latter stages depending on the former:
# - Stage 1: Build jobs
# - Stage 2: Documentation and validation jobs
# - Stage 3: Deployment and clean up jobs

jobs:

#
#  Stage 1:
#

# Here we define the build jobs:
# - opam-build: Building the library using opam
# - quick-build: Building the library quickly using make
# - build: Building with timeing information for use in doc jobs

  # Building the library using opam
  opam-build:
    strategy:
      fail-fast: false
      matrix:
        coq-version-dummy:
          - 'supported'
          - 'latest'
          - 'dev'
        os:
          - ubuntu-latest
        ocaml-version:
          - '4.11-flambda'
    env:
      coq-version: ${{ matrix.coq-version-dummy }}    
    runs-on: ${{ matrix.os }}
    steps:
    # Github actions doesn't let us set workflow level enviornment variables inside the stategy of a job. Therefore we use the dummy variable coq-version in the matrix to set an environment varible env.coq-version, which uses the globablly set coq-version-supported when running the 'supported' case. 
    - name: Set supported coq-version
      if: matrix.coq-version-dummy == 'supported'
      run: echo "coq-version=${{ env.coq-version-supported }}" >> $GITHUB_ENV
        
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Build HoTT
      uses: coq-community/docker-coq-action@v1
      with:
        opam_file: 'hott.opam'
        coq_version: ${{ env.coq-version }}
        ocaml_version: ${{ matrix.ocaml-version }}
        
  # Quick build
  quick-build:
    strategy:
      fail-fast: false
      matrix:
        coq-version-dummy:
          - 'supported'
          - 'latest'
          - 'dev'
        os:
          - ubuntu-latest
        ocaml-version:
          - '4.11-flambda'
    env:
      coq-version: ${{ matrix.coq-version-dummy }}    
    runs-on: ${{ matrix.os }}
    steps:
    # Github actions doesn't let us set workflow level enviornment variables inside the stategy of a job. Therefore we use the dummy variable coq-version in the matrix to set an environment varible env.coq-version, which uses the globablly set coq-version-supported when running the 'supported' case. 
    - name: Set supported coq-version
      if: matrix.coq-version-dummy == 'supported'
      run: echo "coq-version=${{ env.coq-version-supported }}" >> $GITHUB_ENV
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Build HoTT
      uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ env.coq-version }}
        ocaml_version: ${{ matrix.ocaml-version }}
        custom_script: |
          startGroup "Workaround permission issue" # https://github.com/coq-community/docker-coq-action#permissions
          sudo chown -R coq:coq .
          endGroup
          # Use action script feature instead
          make -j`nproc`
          
  # Main build which docs will run off
  build:
    strategy:
      fail-fast: false
      matrix:
        # We build on our supported version of coq and the master version
        coq-version-dummy:
          - 'supported'
          - 'latest'
          - 'dev'
        ocaml-version:
          - '4.11-flambda'
        include:
        - coq-version-dummy: 'dev'
          extra_gh_reportify: '--warnings'
    env:
      coq-version: ${{ matrix.coq-version-dummy }}    
    runs-on: ubuntu-latest
    steps:
    # Github actions doesn't let us set workflow level enviornment variables inside the stategy of a job. Therefore we use the dummy variable coq-version in the matrix to set an environment varible env.coq-version, which uses the globablly set coq-version-supported when running the 'supported' case. 
    - name: Set supported coq-version
      if: matrix.coq-version-dummy == 'supported'
      run: echo "coq-version=${{ env.coq-version-supported }}" >> $GITHUB_ENV
    # Checkout branch
    - uses: actions/checkout@v2
    # Checkout submodules
    - uses: snickerbockers/submodules-init@v4
    # We use the coq docker so we don't have to build coq
    - uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ env.coq-version }}
        ocaml_version: ${{ matrix.ocaml-version }}
        custom_script: |
          startGroup "Workaround permission issue" # https://github.com/coq-community/docker-coq-action#permissions
            sudo chown -R coq:coq .
          endGroup
          sudo apt-get -o Acquire::Retries=30 update -q
          sudo apt-get -o Acquire::Retries=30 install python -y --allow-unauthenticated
          etc/coq-scripts/github/reportify-coq.sh --errors make TIMED=1 -j`nproc` --output-sync GH_REPORT_ERRORS=1

    - name: Revert permissions
      # to avoid a warning at cleanup time - https://github.com/coq-community/docker-coq-action#permissions
      if: ${{ always() }}
      run: sudo chown -R 1001:116 .
    # Tar workspace files
    - name: 'Tar .vo files'
      run: tar -cvf workspace.tar .
    # We upload build artifacts for use by documentation
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: workspace-${{ env.coq-version }}
        path: workspace.tar   

#
#  Stage 2:
#

# Here we define the documentation and validation jobs:
# - coqchk: Runs coqchk
# - alectryon: Builds the alectryon documentation
# - install: Tests install target

      
  # The coqchk job
  coqchk:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        # We build on our supported version of coq and the master version
        coq-version-dummy:
          - 'supported'
          - 'latest'
          - 'dev'
        ocaml-version:
          - '4.11-flambda'
        include:
        - coq-version: 'dev'
          extra_gh_reportify: '--warnings'
    env:
      coq-version: ${{ matrix.coq-version-dummy }}    
    runs-on: ubuntu-latest
    steps:
    # Github actions doesn't let us set workflow level enviornment variables inside the stategy of a job. Therefore we use the dummy variable coq-version in the matrix to set an environment varible env.coq-version, which uses the globablly set coq-version-supported when running the 'supported' case. 
    - name: Set supported coq-version
      if: matrix.coq-version-dummy == 'supported'
      run: echo "coq-version=${{ env.coq-version-supported }}" >> $GITHUB_ENV
    # Checkout branch
    - uses: actions/checkout@v2
    # Checkout submodules
    - uses: snickerbockers/submodules-init@v4
    # Download artifact
    - uses: actions/download-artifact@v2
      with:
        name: workspace-${{ env.coq-version }}
    # Unpack Tar
    - run: tar -xvf workspace.tar
    # We use the coq docker so we don't have to build coq
    - uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ env.coq-version }}
        ocaml_version: ${{ matrix.ocaml-version }}
        custom_script: |
          startGroup "Workaround permission issue" # https://github.com/coq-community/docker-coq-action#permissions
            sudo chown -R coq:coq .
          endGroup
          make validate
    - name: Revert permissions
      # to avoid a warning at cleanup time - https://github.com/coq-community/docker-coq-action#permissions
      if: ${{ always() }}
      run: sudo chown -R 1001:116 .

   # alectryon job
  alectryon:
    needs: build
    strategy:
      matrix:
        coq-version-dummy:
          - 'supported'
        ocaml-version:
          - '4.11-flambda'
    env:
      coq-version: ${{ matrix.coq-version-dummy }}    
    runs-on: ubuntu-latest
    steps:
    # Github actions doesn't let us set workflow level enviornment variables inside the stategy of a job. Therefore we use the dummy variable coq-version in the matrix to set an environment varible env.coq-version, which uses the globablly set coq-version-supported when running the 'supported' case. 
    - name: Set supported coq-version
      if: matrix.coq-version-dummy == 'supported'
      run: echo "coq-version=${{ env.coq-version-supported }}" >> $GITHUB_ENV
    - uses: actions/checkout@v2
    - uses: snickerbockers/submodules-init@v4
    # Download artifact
    - uses: actions/download-artifact@v2
      with:
        name: workspace-${{ env.coq-version }}
    # Unpack Tar
    - run: tar -xvf workspace.tar
    - name: add problem matchers
      run: |
        #echo "::add-matcher::etc/coq-scripts/github/coq-oneline-error.json" # now via a script
        #echo "::add-matcher::etc/coq-scripts/github/coqdoc.json" # disabled for now, since they don't have file names
        echo "::add-matcher::etc/coq-scripts/github/alectryon-error.json"
        #echo "::add-matcher::etc/coq-scripts/github/alectryon-warning.json" # too noisy right now, cf https://github.com/cpitclaudel/alectryon/issues/34 and https://github.com/cpitclaudel/alectryon/issues/33
    - uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ env.coq-version }}
        ocaml_version: 4.11-flambda
        custom_script: |
          opam install -y coq-serapi
          sudo apt-get -o Acquire::Retries=30 update -q
          sudo apt-get -o Acquire::Retries=30 install python3-pip autoconf -y --allow-unauthenticated
          python3 -m pip install --user --upgrade pygments dominate beautifulsoup4 docutils
          startGroup "Workaround permission issue" # https://github.com/coq-community/docker-coq-action#permissions
            sudo chown -R coq:coq .
          endGroup
          make alectryon ALECTRYON_EXTRAFLAGS=--traceback
    - name: Revert permissions
      # to avoid a warning at cleanup time - https://github.com/coq-community/docker-coq-action#permissions
      if: ${{ always() }}
      run: sudo chown -R 1001:116 .
    - name: tar alectryon artifact
      run: tar -cvf alectryon-html.tar alectryon-html
    - name: upload alectryon artifact
      uses: actions/upload-artifact@v1
      with:
        name: alectryon-html
        path: alectryon-html.tar


  # Test install target
  install:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        # We build on our supported version of coq and the master version
        coq-version-dummy:
          - 'supported'
          - 'latest'
          - 'dev'
        ocaml-version:
          - '4.11-flambda'
        include:
        - coq-version: 'dev'
          extra_gh_reportify: '--warnings'
    env:
      coq-version: ${{ matrix.coq-version-dummy }}    
    runs-on: ubuntu-latest
    steps:
    # Github actions doesn't let us set workflow level enviornment variables inside the stategy of a job. Therefore we use the dummy variable coq-version in the matrix to set an environment varible env.coq-version, which uses the globablly set coq-version-supported when running the 'supported' case. 
    - name: Set supported coq-version
      if: matrix.coq-version-dummy == 'supported'
      run: echo "coq-version=${{ env.coq-version-supported }}" >> $GITHUB_ENV
    # Checkout branch
    - uses: actions/checkout@v2
    # Checkout submodules
    - uses: snickerbockers/submodules-init@v4
    # Download artifact
    - uses: actions/download-artifact@v2
      with:
        name: workspace-${{ env.coq-version }}
    # Unpack Tar
    - run: tar -xvf workspace.tar
    # We use the coq docker so we don't have to build coq
    - uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ env.coq-version }}
        ocaml_version: ${{ matrix.ocaml-version }}
        custom_script: |
          startGroup "Workaround permission issue" # https://github.com/coq-community/docker-coq-action#permissions
            sudo chown -R coq:coq .
          endGroup
          ## Test install target
          make install
          (echo 'Require Import HoTT.HoTT.' | coqtop -q) || exit $?

    - name: Revert permissions
      # to avoid a warning at cleanup time - https://github.com/coq-community/docker-coq-action#permissions
      if: ${{ always() }}
      run: sudo chown -R 1001:116 .


  # Quick-doc job
  quick-doc:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        # We build on our supported version of coq and the master version
        coq-version-dummy:
          - 'supported'
        ocaml-version:
          - '4.11-flambda'
        include:
        - coq-version: 'dev'
          extra_gh_reportify: '--warnings'
    env:
      coq-version: ${{ matrix.coq-version-dummy }}    
    runs-on: ubuntu-latest
    steps:
    # Github actions doesn't let us set workflow level enviornment variables inside the stategy of a job. Therefore we use the dummy variable coq-version in the matrix to set an environment varible env.coq-version, which uses the globablly set coq-version-supported when running the 'supported' case. 
    - name: Set supported coq-version
      if: matrix.coq-version-dummy == 'supported'
      run: echo "coq-version=${{ env.coq-version-supported }}" >> $GITHUB_ENV
    # Checkout branch
    - uses: actions/checkout@v2
    # Checkout submodules
    - uses: snickerbockers/submodules-init@v4
    # Download artifact
    - uses: actions/download-artifact@v2
      with:
        name: workspace-${{ env.coq-version }}
    # Unpack Tar
    - run: tar -xvf workspace.tar
    # We use the coq docker so we don't have to build coq
    - uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ env.coq-version }}
        ocaml_version: ${{ matrix.ocaml-version }}
        custom_script: |
          sudo apt-get update
          sudo apt-get install -y ghc cabal-install
          sudo apt-get install -y --allow-unauthenticated \
          libnode-dev node-gyp libssl-dev npm aspcud      \
          graphviz xsltproc python-lxml python-pexpect    \
          libxml2-dev libxslt1-dev time lua5.1 unzip

          cabal update
          cabal install graphviz text
          sudo -E npm config set strict-ssl false
          sudo -E npm i -g npm
          sudo -E npm install -g doctoc || exit $?
          
          startGroup "Workaround permission issue" # https://github.com/coq-community/docker-coq-action#permissions
            sudo chown -R coq:coq .
          endGroup
          ## Make dependency graph
          make HoTT.deps HoTTCore.deps || exit $?
          runhaskell etc/DepsToDot.hs --coqdocbase="http://hott.github.io/HoTT/proviola-html/" --title="HoTT Library Dependency Graph" < HoTT.deps > HoTT.dot || exit $?
          runhaskell etc/DepsToDot.hs --coqdocbase="http://hott.github.io/HoTT/proviola-html/" --title="HoTT Core Library Dependency Graph" < HoTTCore.deps > HoTTCore.dot || exit $?
          dot -Tsvg HoTT.dot -o HoTT.svg || exit $?
          dot -Tsvg HoTTCore.dot -o HoTTCore.svg || exit $?
          rm -rf dependencies
          mkdir -p dependencies
          mv HoTT.svg HoTTCore.svg dependencies/
          git add dependencies/*.svg
    - name: Revert permissions
      # to avoid a warning at cleanup time - https://github.com/coq-community/docker-coq-action#permissions
      if: ${{ always() }}
      run: sudo chown -R 1001:116 .
    # Tar workspace files
    - name: 'Tar .svg files'
      run: tar -cvf dependencies.tar dependencies
    # We upload build artifacts for use by documentation
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: dependencies
        path: dependencies.tar   

  # html-doc job
  # This builds coqdoc, proviola and timing docs and uploads their artifacts
  html-doc:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        # We build on our supported version of coq and the master version
        coq-version-dummy:
          - 'supported'
        ocaml-version:
          - '4.11-flambda'
        include:
        - coq-version: 'dev'
          extra_gh_reportify: '--warnings'
    env:
      coq-version: ${{ matrix.coq-version-dummy }}    
    runs-on: ubuntu-latest
    steps:
    # Github actions doesn't let us set workflow level enviornment variables inside the stategy of a job. Therefore we use the dummy variable coq-version in the matrix to set an environment varible env.coq-version, which uses the globablly set coq-version-supported when running the 'supported' case. 
    - name: Set supported coq-version
      if: matrix.coq-version-dummy == 'supported'
      run: echo "coq-version=${{ env.coq-version-supported }}" >> $GITHUB_ENV
    # Checkout branch
    - uses: actions/checkout@v2
    # Checkout submodules
    - uses: snickerbockers/submodules-init@v4
    # Download artifact
    - uses: actions/download-artifact@v2
      with:
        name: workspace-${{ env.coq-version }}
    # Unpack Tar
    - run: tar -xvf workspace.tar
    # We use the coq docker so we don't have to build coq
    - uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ env.coq-version }}
        ocaml_version: ${{ matrix.ocaml-version }}
        custom_script: |
          sudo apt-get update
          sudo apt-get install -y ghc cabal-install
          sudo apt-get install -y --allow-unauthenticated \
          libnode-dev node-gyp libssl-dev npm aspcud curl \
          graphviz xsltproc python-lxml python-pexpect    \
          libxml2-dev libxslt1-dev time lua5.1 unzip python

          sudo curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
          sudo python ./get-pip.py
          ./etc/ci/install_proviola.sh || exit $?
          
          startGroup "Workaround permission issue" # https://github.com/coq-community/docker-coq-action#permissions
            sudo chown -R coq:coq .
          endGroup
          
          ## TODO: can we make seperate jobs for these?
          ## Make HTML doc
          make html || exit $?
          ## Make proviola doc
          make proviola -j`proc` TIMED=1 -k; make proviola TIMED=1 || exit $?
          ## Make timing doc
          make timing-html || exit $?

          
    - name: Revert permissions
      # to avoid a warning at cleanup time - https://github.com/coq-community/docker-coq-action#permissions
      if: ${{ always() }}
      run: sudo chown -R 1001:116 .
    # Tar html files
    - name: 'Tar doc files'
      run: |
        tar -cvf coqdoc-html.tar coqdoc-html
        tar -cvf proviola-html.tar proviola-html
        tar -cvf timing-html.tar timing-html
    # Upload coqdoc-html artifact
    - name: 'Upload coqdoc-html Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: coqdoc-html
        path: coqdoc-html.tar   
    # Upload proviola-html artifact
    - name: 'Upload proviola-html Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: proviola-html
        path: proviola-html.tar   
    # Upload timing-html artifact
    - name: 'Upload timing-html Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: timing-html
        path: timing-html.tar   

        
      

#
#  Stage 3
#

# Here we define the cleanup and deplyoment jobs:
# - delete-workspace-artifacts: We delete the workspace artifacts from the build job

  delete-workspace-artifacts:
    # We always want to run this job even if we cancel
    if: ${{ always() }}
    # We depend on the stage 2 jobs
    needs:
      - alectryon
      - coqchk
      - install
      - quick-doc
      - html-doc
    runs-on: ubuntu-latest
    steps:
    # Delete workspace artifacts
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: workspace-${{ env.coq-version-supported }}
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: workspace-latest
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: workspace-dev
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: alectryon-html
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: dependencies
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: coqdoc-html
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: proviola-html
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: timing-html
    
