name: CI2

on: [ push , pull_request ]

jobs:

  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
#          - windows-latest
        ocaml-version:
          - 4.11.0
#          - 4.07.1
        coq-version:
          - 8.13.2
          - dev
    runs-on: ${{ matrix.os }}
    outputs:
      coq-hash: ${{ steps.coq-hash.outputs.hash }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Cache .opam/ üí∏
        # This is a fork of github actions cache that always uploads
        uses: pat-s/always-upload-cache@v2.1.5
        env:
          cache-name: cache-opam
        with:
          path: ~/.opam
          key: ${{ runner.os }}-build-${{ env.cache-name }}-ocaml-${{ matrix.ocaml-version }}-coq-${{ steps.coq-hash.outputs.hash }}
      - name: Install OCaml ${{ matrix.ocaml-version }} üê´
        if: steps.cache.outputs.cache-hit != 'true'
        uses: avsm/setup-ocaml@v1
        with:
          ocaml-version: ${{ matrix.ocaml-version }}
      - name: Install Coq üêî
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          # First add the dev packages
          opam repo add coq-core-dev https://coq.inria.fr/opam/core-dev --all-switches
          # Update package listings
          opam update
          # Install coq
          opam install coq.${{ matrix.coq-version }}
      # This step outputs the hash of coq for use in key for cache
      - name: Coq hash #Ô∏è‚É£
        id: coq-hash
        run: echo "::set-output name=hash::`opam info -f source-hash coq`"
      - name: Build HoTT library üç©
        run:
          # Environment variables are local to steps so we have to do this here
          eval $(opam env)
          make

  ## These jobs run using a docker container
  build-quick:
    strategy:
      fail-fast: false
      matrix:
        # We build on our supported version of coq and the master version
        coq_version: [ '8.13' , 'latest' , 'dev' ]
        ocaml_version: [ '4.11-flambda' ]
        include:
        - coq_version: 'dev'
          extra_gh_reportify: '--warnings'
    runs-on: ubuntu-latest
    steps:
    # Checkout branch
    - uses: actions/checkout@v2
    # Checkout submodules
    - uses: snickerbockers/submodules-init@v4
    # We use the coq docker so we don't have to build coq
    - uses: coq-community/docker-coq-action@v1
      with:
        coq_version: ${{ matrix.coq_version }}
        ocaml_version: ${{ matrix.ocaml_version }}
        custom_script: |
          startGroup "Workaround permission issue" # https://github.com/coq-community/docker-coq-action#permissions
            sudo chown -R coq:coq .
          endGroup
          sudo apt-get -o Acquire::Retries=30 update -q
          sudo apt-get -o Acquire::Retries=30 install python -y --allow-unauthenticated
          etc/coq-scripts/github/reportify-coq.sh --stdout --errors ${{ matrix.extra_gh_reportify }} etc/coq-scripts/timing/make-pretty-timed.sh -j2 TIMING=1
          make
    - name: Revert permissions
      # to avoid a warning at cleanup time - https://github.com/coq-community/docker-coq-action#permissions
      if: ${{ always() }}
      run: sudo chown -R 1001:116 .

