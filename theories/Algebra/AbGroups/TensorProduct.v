Require Import Basics.Overture Basics.Tactics.
Require Import Types.Forall.
Require Import WildCat.Core WildCat.Equiv WildCat.Monoidal WildCat.Bifunctor.
Require Import WildCat.NatTrans.
Require Import Algebra.Groups.Group Algebra.Groups.QuotientGroup.
Require Import Algebra.AbGroups.AbelianGroup Algebra.AbGroups.Biproduct.
Require Import Algebra.AbGroups.AbHom Algebra.AbGroups.FreeAbelianGroup.
Require Import Algebra.AbGroups.Abelianization Algebra Algebra.Groups.FreeGroup.
Require Import Colimits.Quotient.
Require Import Spaces.List.Core.
Require Import Truncations.

Local Open Scope mc_scope.
Local Open Scope mc_add_scope.

(** * Tensor Product of Abelian Groups *)

(** ** Construction *)

(** We define the tensor product of abelian groups as a quotient of the free abelian group on pairs of elements of the two groups by the subgroup generated by the bilinear pairs. *)

(** Here we define the subgroup of bilinear pairs *)
Definition subgroup_bilinear_pairs {A B : AbGroup}
  : Subgroup (FreeAbGroup (A * B)).
Proof.
  snrapply subgroup_generated.
  intros x.
  refine ((exists (a1 a2 : A) (b : B), _) + exists (a : A) (b1 b2 : B), _)%type. 
  - refine (_ - _ - _ = x).
    1-3: apply freeabgroup_in.
    + exact (a1 + a2, b).
    + exact (a1, b).
    + exact (a2, b).
  - refine (_ - _ - _ = x).
    1-3: apply freeabgroup_in.
    + exact (a, b1 + b2).
    + exact (a, b1).
    + exact (a, b2).
Defined.

Definition ab_tensor_prod (A B : AbGroup) : AbGroup
  := QuotientAbGroup (FreeAbGroup (A * B)) subgroup_bilinear_pairs.

Definition tensor {A B : AbGroup} : A -> B -> ab_tensor_prod A B
  := fun a b => grp_quotient_map (freeabgroup_in (a, b)).

Definition tensor_dist_l {A B : AbGroup} (a : A) (b b' : B)
  : tensor a (b + b') = tensor a b + tensor a b'.
Proof.
  apply qglue, tr.
  rewrite <- grp_inv_inv.
  apply sgt_inv.
  rewrite 2 grp_inv_op.
  rewrite grp_inv_inv.
  rewrite (commutativity (- _)).
  rewrite commutativity.
  rewrite simple_associativity.
  apply sgt_in.
  right.
  by exists a, b, b'.
Defined.

Definition tensor_dist_r {A B : AbGroup} (a a' : A) (b : B)
  : tensor (a + a') b = tensor a b + tensor a' b.
Proof.
  apply qglue, tr.
  rewrite <- grp_inv_inv.
  apply sgt_inv.
  rewrite 2 grp_inv_op.
  rewrite grp_inv_inv.
  rewrite (commutativity (- _)).
  rewrite commutativity.
  rewrite simple_associativity.
  apply sgt_in.
  left.
  by exists a, a', b.
Defined.

Definition grp_homo_tensor_l {A B : AbGroup} (b : B)
  : A $-> ab_tensor_prod A B.
Proof.
  snrapply Build_GroupHomomorphism.
  - exact (fun a => tensor a b).
  - intros a a'.
    nrapply tensor_dist_r.
Defined.

Definition grp_homo_tensor_r {A B : AbGroup} (a : A)
  : B $-> ab_tensor_prod A B.
Proof.
  snrapply Build_GroupHomomorphism.
  - exact (fun b => tensor a b).
  - intros b b'.
    nrapply tensor_dist_l.
Defined. 

Definition tensor_neg_l {A B : AbGroup} (a : A) (b : B)
  : tensor (-a) b = - tensor a b.
Proof.
  change (grp_homo_tensor_l b (-a) = - tensor a b).
  by rewrite grp_homo_inv.
Defined.

Definition tensor_neg_r {A B : AbGroup} (a : A) (b : B)
  : tensor a (-b) = - tensor a b.
Proof.
  change (grp_homo_tensor_r a (-b) = - tensor a b).
  by rewrite grp_homo_inv.
Defined.

Definition tensor_zero_l {A B : AbGroup} (b : B)
  : tensor (A:=A) 0 b = 0.
Proof.
  change (grp_homo_tensor_l (A:=A) b 0 = 0).
  nrapply grp_homo_unit.
Defined.

Definition tensor_zero_r {A B : AbGroup} (a : A)
  : tensor (B:=B) a 0 = 0.
Proof.
  change (grp_homo_tensor_r (B:=B) a 0 = 0).
  nrapply grp_homo_unit.
Defined.

Definition tensor_zero {A B : AbGroup}
  : @tensor A B 0 0 = 0.
Proof.
  apply tensor_zero_l.
Defined.

Definition grp_homo_tensor `{Funext} {A B : AbGroup}
  : A $-> ab_hom B (ab_tensor_prod A B). 
Proof.
  snrapply Build_GroupHomomorphism.
  - intros a.
    snrapply Build_GroupHomomorphism.
    + exact (tensor a).
    + nrapply tensor_dist_l.
  - intros a a'.
    apply equiv_path_grouphomomorphism.
    intros b.
    nrapply tensor_dist_r.
Defined.

Definition ab_tensor_prod_rec {A B C : AbGroup}
  (f : A * B -> C)
  (l : forall a b b', f (a, b + b') = f (a, b) + f (a, b'))
  (r : forall a a' b, f (a + a', b) = f (a, b) + f (a', b)) 
  : ab_tensor_prod A B $-> C.
Proof.
  unfold ab_tensor_prod.
  snrapply grp_quotient_rec.
  - snrapply grp_homo_abel_rec.
    snrapply FreeGroup_rec.
    exact f.
  - intros x H.
    strip_truncations.
    induction H as
      [ x [ [ a [ a' [ b p ] ] ] | [ a [ b [ b' p ] ] ] ]
      |
      | ? ? ? H1 ? H2 ].
    + destruct p.
      rewrite 2 grp_homo_op.
      rewrite 2 grp_homo_inv.
      apply grp_moveL_1M^-1%equiv.
      apply grp_moveL_gM^-1%equiv.
      unfold freeabgroup_in.
      change (grp_homo_abel_rec ?f (abel_unit ?G ?x)) with (f x).
      simpl.
      rewrite 3 grp_unit_r.
      rhs rapply abgroup_commutative.
      apply r.
    + destruct p.
      rewrite 2 grp_homo_op.
      rewrite 2 grp_homo_inv.
      apply grp_moveL_1M^-1%equiv.
      apply grp_moveL_gM^-1%equiv.
      unfold freeabgroup_in.
      change (grp_homo_abel_rec ?f (abel_unit ?G ?x)) with (f x).
      simpl.
      rewrite 3 grp_unit_r.
      rhs rapply abgroup_commutative.
      apply l.
    + nrapply grp_homo_unit.
    + rewrite grp_homo_op, grp_homo_inv.
      apply grp_moveL_1M^-1.
      exact(H1 @ H2^).
Defined.

Definition ab_tensor_prod_rec_beta_tensor {A B C : AbGroup}
  (f : A * B -> C)
  (l : forall a b b', f (a, b + b') = f (a, b) + f (a, b'))
  (r : forall a a' b, f (a + a', b) = f (a, b) + f (a', b))
  (a : A) (b : B)
  : ab_tensor_prod_rec f l r (tensor a b) = f (a, b).
Proof.
  change (f (a, b) + mon_unit = f (a, b)).
  apply grp_unit_r.
Defined.

Definition ab_tensor_prod_ind_hprop {A B : AbGroup}
  (P : ab_tensor_prod A B -> Type)
  {H : forall x, IsHProp (P x)}
  (H1 : P 0)
  (H2 : forall a b, P (tensor a b))
  (H3 : forall x, P x -> P (-x))
  (H4 : forall x y, P x -> P y -> P (x + y))
  : forall x, P x.
Proof.
  unfold ab_tensor_prod.
  srapply Quotient_ind_hprop.
  srapply Abel_ind_hprop.
  srapply FreeGroup_ind_hprop.
  - exact H1.
  - intros [a b].
    apply H2.
  - cbn beta.
    intros w H5.
    rewrite ab_negate.
    change (P (quotient_abgroup_map _ subgroup_bilinear_pairs (- ab w))).
    rewrite grp_homo_inv.
    apply H3.
    exact H5.
  - cbn beta.
    intros x y Hx Hy.
    change (P (quotient_abgroup_map _ subgroup_bilinear_pairs (ab (x + y)))).
    rewrite issemigrouppreserving_ab.
    rewrite grp_homo_op.
    by apply H4.
Defined.

Definition ab_tensor_prod_ind_homotopy {A B G : AbGroup}
  {f f' : ab_tensor_prod A B $-> G}
  (H : forall a b, f (tensor a b) = f' (tensor a b))
  : f $== f'.
Proof.
  rapply (ab_tensor_prod_ind_hprop (fun _ => _)).
  - by rewrite 2 grp_homo_unit.
  - exact H.
  - intros x p.
    rewrite 2 grp_homo_inv.
    exact (ap (-) p).
  - intros x y p q.
    rewrite 2 grp_homo_op.
    exact (ap011 (+) p q).
Defined.

Definition ab_tensor_prod_ind_homotopy_plus {A B G : AbGroup}
  {f f' f'' : ab_tensor_prod A B $-> G}
  (H : forall a b, f (tensor a b) = f' (tensor a b) + f'' (tensor a b))
  : forall x, f x = f' x + f'' x
  := ab_tensor_prod_ind_homotopy (f':=ab_homo_add f' f'') H.

Definition ab_tensor_prod_ind_hprop_triple {A B C : AbGroup}
  (P : ab_tensor_prod A (ab_tensor_prod B C) -> Type)
  (H : forall x, IsHProp (P x))
  (H1 : P 0)
  (H2 : forall a b c, P (tensor a (tensor b c)))
  (H3 : forall x, P x -> P (-x))
  (H4 : forall x y, P x -> P y -> P (x + y))
  : forall x, P x.
Proof.
  rapply (ab_tensor_prod_ind_hprop P H1).
  - intros a.
    rapply (ab_tensor_prod_ind_hprop (fun x => P (tensor _ x))).
    + rewrite tensor_zero_r.
      exact H1.
    + nrapply H2.
    + intros x Hx.
      rewrite tensor_neg_r.
      by apply H3.
    + intros x y Hx Hy.
      rewrite tensor_dist_l.
      by apply H4.
  - exact H3.
  - exact H4.
Defined.

Definition ab_tensor_prod_ind_homotopy_triple {A B C G : AbGroup}
  {f f' : ab_tensor_prod A (ab_tensor_prod B C) $-> G}
  (H : forall a b c, f (tensor a (tensor b c)) = f' (tensor a (tensor b c)))
  : f $== f'.
Proof.
  rapply (ab_tensor_prod_ind_hprop_triple (fun _ => _)).
  - by rewrite 2 grp_homo_unit.
  - exact H.
  - intros x p.
    rewrite 2 grp_homo_inv.
    exact (ap (-) p).
  - intros x y p q.
    rewrite 2 grp_homo_op.
    exact (ap011 (+) p q).
Defined.

Definition ab_tensor_prod_ind_hprop_quad {A B C D : AbGroup}
  (P : ab_tensor_prod A (ab_tensor_prod B (ab_tensor_prod C D)) -> Type)
  (H : forall x, IsHProp (P x))
  (H1 : P 0)
  (H2 : forall a b c d, P (tensor a (tensor b (tensor c d))))
  (H3 : forall x, P x -> P (-x))
  (H4 : forall x y, P x -> P y -> P (x + y))
  : forall x, P x.
Proof.
  rapply (ab_tensor_prod_ind_hprop P H1).
  - intros a.
    rapply (ab_tensor_prod_ind_hprop_triple (fun x => P (tensor _ x))).
    + rewrite tensor_zero_r.
      exact H1.
    + nrapply H2.
    + intros x Hx.
      rewrite tensor_neg_r.
      by apply H3.
    + intros x y Hx Hy.
      rewrite tensor_dist_l.
      by apply H4.
  - exact H3.
  - exact H4.
Defined.

Definition ab_tensor_prod_ind_homotopy_quad {A B C D G : AbGroup}
  {f f' : ab_tensor_prod A (ab_tensor_prod B (ab_tensor_prod C D)) $-> G}
  (H : forall a b c d, f (tensor a (tensor b (tensor c d)))
    = f' (tensor a (tensor b (tensor c d))))
  : f $== f'.
Proof.
  rapply (ab_tensor_prod_ind_hprop_quad (fun _ => _)).
  - by rewrite 2 grp_homo_unit.
  - exact H.
  - intros x p.
    rewrite 2 grp_homo_inv.
    exact (ap (-) p).
  - intros x y p q.
    rewrite 2 grp_homo_op.
    exact (ap011 (+) p q).
Defined.

Definition functor_ab_tensor_prod {A B A' B' : AbGroup}
  (f : A $-> A') (g : B $-> B')
  : ab_tensor_prod A B $-> ab_tensor_prod A' B'.
Proof.
  snrapply ab_tensor_prod_rec.
  - intros [a b].
    exact (tensor (f a) (g b)).
  - intros a b b'; hnf.
    rewrite grp_homo_op.
    by rewrite tensor_dist_l.
  - intros a a' b; hnf.
    rewrite grp_homo_op.
    by rewrite tensor_dist_r.
Defined.

Definition functor_ab_tensor_prod_beta_tensor {A B A' B' : AbGroup}
  (f : A $-> A') (g : B $-> B') (a : A) (b : B)
  : functor_ab_tensor_prod f g (tensor a b) = tensor (f a) (g b).
Proof.
  nrapply ab_tensor_prod_rec_beta_tensor.
Defined.

Definition functor2_ab_tensor_prod {A B A' B' : AbGroup}
  {f f' : A $-> A'} (p : f $== f') {g g' : B $-> B'} (q : g $== g')
  : functor_ab_tensor_prod f g $== functor_ab_tensor_prod f' g'.
Proof.
  snrapply ab_tensor_prod_ind_homotopy.
  intros a b.
  rewrite 2 functor_ab_tensor_prod_beta_tensor.
  exact (ap011 tensor (p _) (q _)).
Defined.

Definition functor_ab_tensor_prod_id (A B : AbGroup)
  : functor_ab_tensor_prod (Id A) (Id B) $== Id (ab_tensor_prod A B).
Proof.
  snrapply ab_tensor_prod_ind_homotopy.
  intros a b.
  apply functor_ab_tensor_prod_beta_tensor.
Defined.

Definition functor_ab_tensor_prod_compose {A B C A' B' C' : AbGroup}
  (f : A $-> B) (g : B $-> C) (f' : A' $-> B') (g' : B' $-> C')
  : functor_ab_tensor_prod (g $o f) (g' $o f')
    $== functor_ab_tensor_prod g g' $o functor_ab_tensor_prod f f'.
Proof.
  snrapply ab_tensor_prod_ind_homotopy.
  intros a b; hnf.
  lhs nrapply functor_ab_tensor_prod_beta_tensor.
  change (tensor (g (f a)) (g' (f' b))
    = functor_ab_tensor_prod g g' (functor_ab_tensor_prod f f' (tensor a b))).
  by rewrite 2 functor_ab_tensor_prod_beta_tensor.
Defined.

Global Instance is0bifunctor_ab_tensor_prod : Is0Bifunctor ab_tensor_prod.
Proof.
  rapply Build_Is0Bifunctor'.
  snrapply Build_Is0Functor.
  intros [A B] [A' B'] [f g].
  exact (functor_ab_tensor_prod f g).
Defined.

Global Instance is1bifunctor_ab_tensor_prod : Is1Bifunctor ab_tensor_prod.
Proof.
  rapply Build_Is1Bifunctor'.
  snrapply Build_Is1Functor.
  - intros AB A'B' fg f'g' [p q].
    exact (functor2_ab_tensor_prod p q).
  - intros [A B].
    exact (functor_ab_tensor_prod_id A B).
  - intros AA' BB' CC' [f g] [f' g'].
    exact (functor_ab_tensor_prod_compose f f' g g').
Defined.

Definition ab_tensor_swap {A B} : ab_tensor_prod A B $-> ab_tensor_prod B A.
Proof.
  snrapply ab_tensor_prod_rec. 
  - exact (uncurry (flip tensor)).
  - intros a b b'.
    apply tensor_dist_r.
  - intros a a' b.
    apply tensor_dist_l.
Defined.

Definition ab_tensor_swap_beta_tensor {A B} a b
  : @ab_tensor_swap A B (tensor a b) = tensor b a.
Proof.
  apply ab_tensor_prod_rec_beta_tensor.
Defined. 

Definition ab_tensor_swap_swap {A B}
  : ab_tensor_swap $o @ab_tensor_swap A B $== Id _. 
Proof.
  snrapply ab_tensor_prod_ind_homotopy.
  intros a b; hnf.
  change (ab_tensor_swap (ab_tensor_swap (tensor a b)) = tensor a b).
  by rewrite 2 ab_tensor_swap_beta_tensor.
Defined. 

Definition ab_tensor_swap_natural {A B A' B'} (f : A $-> A') (g : B $-> B')
  : ab_tensor_swap $o functor_ab_tensor_prod f g
    $== functor_ab_tensor_prod g f $o ab_tensor_swap.
Proof.
  snrapply ab_tensor_prod_ind_homotopy.
  intros a b.
  change (ab_tensor_swap (functor_ab_tensor_prod f g (tensor a b))
    = functor_ab_tensor_prod g f (ab_tensor_swap (tensor a b))).
  rewrite functor_ab_tensor_prod_beta_tensor.
  rewrite 2 ab_tensor_swap_beta_tensor.
  by rewrite functor_ab_tensor_prod_beta_tensor.
Defined.

Global Instance symmetricbraiding_ab_tensor_prod : SymmetricBraiding ab_tensor_prod.
Proof.
  snrapply Build_SymmetricBraiding.
  - snrapply Build_NatTrans.
    + intro; exact ab_tensor_swap.
    + snrapply Build_Is1Natural.
      intros; nrapply ab_tensor_swap_natural.
  - intros; nrapply ab_tensor_swap_swap.
Defined. 

Definition ab_tensor_prod_twist {A B C}
  : ab_tensor_prod A (ab_tensor_prod B C) $-> ab_tensor_prod B (ab_tensor_prod A C).
Proof.
  snrapply ab_tensor_prod_rec.
  - apply prod_ind.
    intros a.
    snrapply ab_tensor_prod_rec.
    + intros [b c].
      exact (tensor b (tensor a c)).
    + intros b c c'; hnf.
      lhs nrapply ap.
      1: nrapply tensor_dist_l.
      nrapply tensor_dist_l.
    + intros b b' c; hnf.
      nrapply tensor_dist_r.
  - intros; nrapply grp_homo_op.
  - intros a a'; unfold prod_ind; hnf.
    nrapply ab_tensor_prod_ind_homotopy_plus.
    intros b c.
    rewrite 3 ab_tensor_prod_rec_beta_tensor.
    by rewrite tensor_dist_r, tensor_dist_l.
Defined.

Definition ab_tensor_prod_twist_beta_tensor_tensor {A B C} a b c
  : @ab_tensor_prod_twist A B C (tensor a (tensor b c)) = tensor b (tensor a c).
Proof.
  rapply ab_tensor_swap_beta_tensor.
Defined.

Definition ab_tensor_prod_twist_twist {A B C}
  : ab_tensor_prod_twist $o @ab_tensor_prod_twist A B C $== Id _.
Proof.
  snrapply ab_tensor_prod_ind_homotopy_triple.
  intros a b c.
  change (ab_tensor_prod_twist (ab_tensor_prod_twist (tensor a (tensor b c)))
    = tensor a (tensor b c)).
  by rewrite 2 ab_tensor_prod_twist_beta_tensor_tensor.
Defined.

Definition ab_tensor_prod_twist_natural {A B C A' B' C'}
  (f : A $-> A') (g : B $-> B') (h : C $-> C')
  : ab_tensor_prod_twist $o fmap11 ab_tensor_prod f (fmap11 ab_tensor_prod g h)
    $== fmap11 ab_tensor_prod g (fmap11 ab_tensor_prod f h) $o ab_tensor_prod_twist.
Proof.
  snrapply ab_tensor_prod_ind_homotopy_triple.
  intros a b c.
  change (ab_tensor_prod_twist (functor_ab_tensor_prod f (functor_ab_tensor_prod g h) (tensor a (tensor b c)))
    = functor_ab_tensor_prod g (functor_ab_tensor_prod f h) (ab_tensor_prod_twist (tensor a (tensor b c)))).
  rewrite 2 functor_ab_tensor_prod_beta_tensor.
  rewrite 2 ab_tensor_prod_twist_beta_tensor_tensor.
  by rewrite 2 functor_ab_tensor_prod_beta_tensor.
Defined.

Require Import Spaces.Int.
Require Import AbGroups.Z.

Definition tensor_grp_pow {A B : AbGroup} (z : Int) (a : A) (b : B)
  : tensor (grp_pow a z) b = tensor a (grp_pow b z).
Proof.
  induction z.
  - rhs nrapply tensor_zero_r.
    nrapply tensor_zero_l.
  - rewrite 2 grp_pow_succ.
    rewrite tensor_dist_r, tensor_dist_l.
    nrapply ap.
    exact IHz.
  - rewrite 2 grp_pow_pred.
    rewrite tensor_dist_r, tensor_dist_l.
    snrapply ap011.
    + rhs nrapply tensor_neg_r.
      apply tensor_neg_l.
    + exact IHz.
Defined.

Definition ab_tensor_prod_Z_r {A}
  : ab_tensor_prod A abgroup_Z $<~> A.
Proof.
  symmetry.
  snrapply Build_GroupIsomorphism.
  - nrapply grp_homo_tensor_l.
    exact 1%int.
  - snrapply isequiv_adjointify.
    + snrapply ab_tensor_prod_rec.
      * exact (uncurry grp_pow_homo).
      * intros a z z'; cbn beta; unfold uncurry, fst, snd.
        nrapply grp_homo_op.
      * intros a a' z; cbn beta; unfold uncurry, fst, snd.
        nrapply grp_pow_plus.
    + hnf.
      change (forall x : ?A, (grp_homo_map _ _ ?f) ((grp_homo_map _ _ ?g) x) = x)
        with (f $o g $== Id _).
      snrapply ab_tensor_prod_ind_homotopy.
      intros a z.
      lhs nrapply (ap (grp_homo_tensor_l _)).
      1: apply ab_tensor_prod_rec_beta_tensor.
      change (tensor (B:=abgroup_Z) (grp_pow a z) 1%int = tensor a z).
      lhs nrapply tensor_grp_pow.
      nrapply ap.
      apply abgroup_Z_grp_pow_1.
    + hnf.
      intros x.
      lhs nrapply ab_tensor_prod_rec_beta_tensor.
      apply grp_unit_r.
Defined.

Global Instance rightunitor_ab_tensor_prod
  : RightUnitor ab_tensor_prod abgroup_Z.
Proof.
  snrapply Build_NatEquiv.
  - intros A.
    apply ab_tensor_prod_Z_r.
  - snrapply Build_Is1Natural.
    intros A A' f.
    snrapply ab_tensor_prod_ind_homotopy.
    intros a z.
    rhs nrapply (ap f).
    2: nrapply ab_tensor_prod_rec_beta_tensor.
    change (ab_tensor_prod_Z_r (fmap (flip ab_tensor_prod abgroup_Z) f (tensor a z))
      = f (grp_pow_homo a z)).
    lhs nrapply ap.
    1: nrapply functor_ab_tensor_prod_beta_tensor.
    lhs nrapply ab_tensor_prod_rec_beta_tensor.
    symmetry.
    apply grp_pow_natural.
Defined.

Global Instance left_unitor_ab_tensor_prod
  : LeftUnitor ab_tensor_prod abgroup_Z.
Proof.
  rapply left_unitor_twist.
Defined.

Global Instance associator_ab_tensor_prod : Associator ab_tensor_prod.
Proof.
  srapply associator_twist.
  - exact @ab_tensor_prod_twist.
  - intros; nrapply ab_tensor_prod_twist_twist.
  - intros; nrapply ab_tensor_prod_twist_natural.
Defined.

Global Instance triangle_ab_tensor_prod
  : TriangleIdentity ab_tensor_prod abgroup_Z.
Proof.
  snrapply triangle_twist.
  intros A B.
  snrapply ab_tensor_prod_ind_homotopy_triple.
  intros a b z.
  change (functor_ab_tensor_prod (Id A) (rightunitor_ab_tensor_prod B) (tensor a (tensor b z))
   = ab_tensor_swap (functor_ab_tensor_prod (Id B)
    (rightunitor_ab_tensor_prod A) (ab_tensor_prod_twist (tensor a (tensor b z))))).
  rewrite ab_tensor_prod_twist_beta_tensor_tensor.
  rewrite 2 functor_ab_tensor_prod_beta_tensor.
  rewrite ab_tensor_swap_beta_tensor.
  lhs nrapply ap.
  1: rapply ab_tensor_prod_rec_beta_tensor.
  rhs nrapply (ap (fun x => tensor x _)).
  2: rapply ab_tensor_prod_rec_beta_tensor.
  exact (tensor_grp_pow _ _ _)^.
Defined.

Global Instance hexagon_ab_tensor_prod : HexagonIdentity ab_tensor_prod.
Proof.
  snrapply hexagon_twist.
  intros A B C.
  snrapply ab_tensor_prod_ind_homotopy_triple.
  intros b a c.
  change (functor_ab_tensor_prod (Id C) ab_tensor_swap (ab_tensor_prod_twist
        (functor_ab_tensor_prod (Id B) ab_tensor_swap (tensor b (tensor a c))))
    = ab_tensor_prod_twist (functor_ab_tensor_prod (Id A) ab_tensor_swap
        (ab_tensor_prod_twist (tensor b (tensor a c))))).
  rewrite functor_ab_tensor_prod_beta_tensor.
  rewrite ab_tensor_swap_beta_tensor.
  rewrite 2 ab_tensor_prod_twist_beta_tensor_tensor.
  rewrite 2 functor_ab_tensor_prod_beta_tensor.
  rewrite 2 ab_tensor_swap_beta_tensor.
  rewrite ab_tensor_prod_twist_beta_tensor_tensor.
  reflexivity.
Defined.

Global Instance pentagon_ab_tensor_prod : PentagonIdentity ab_tensor_prod.
Proof.
  snrapply pentagon_twist.
  intros A B C D.
  snrapply ab_tensor_prod_ind_homotopy_quad.
  intros a b c d.
  change (
    functor_ab_tensor_prod (Id C) ab_tensor_swap
      (ab_tensor_prod_twist
      (ab_tensor_swap
      (ab_tensor_prod_twist
      (functor_ab_tensor_prod (Id A) ab_tensor_swap
      (tensor a (tensor b (tensor c d)))))))
    = functor_ab_tensor_prod (Id C) ab_tensor_prod_twist
        (functor_ab_tensor_prod (Id C) (functor_ab_tensor_prod (Id A) (@ab_tensor_swap B D))
        (ab_tensor_prod_twist
        (functor_ab_tensor_prod (Id A) ab_tensor_prod_twist
        (tensor a (tensor b (tensor c d))))))).
  rewrite 2 functor_ab_tensor_prod_beta_tensor.
  rewrite ab_tensor_swap_beta_tensor.
  rewrite 3 ab_tensor_prod_twist_beta_tensor_tensor.
  rewrite ab_tensor_swap_beta_tensor.
  rewrite ab_tensor_prod_twist_beta_tensor_tensor.
  rewrite 4 functor_ab_tensor_prod_beta_tensor.
  rewrite 2 ab_tensor_swap_beta_tensor.
  rewrite ab_tensor_prod_twist_beta_tensor_tensor.
  reflexivity.
Defined.

Global Instance ismonoidal_ab_tensor_prod
  : IsMonoidal AbGroup ab_tensor_prod abgroup_Z
  := {}.

Global Instance issymmmetricmonoidal_ab_tensor_prod
  : IsSymmetricMonoidal AbGroup ab_tensor_prod abgroup_Z
  := {}.
